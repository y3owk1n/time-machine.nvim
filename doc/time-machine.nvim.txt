*time-machine.nvim.txt*     For Neovim >= 0.11.0    Last change: 2025 April 27

==============================================================================
Table of Contents                        *time-machine.nvim-table-of-contents*

1. time-machine.nvim                     |time-machine.nvim-time-machine.nvim|
  - Features                    |time-machine.nvim-time-machine.nvim-features|
  - Installation            |time-machine.nvim-time-machine.nvim-installation|
  - Configuration          |time-machine.nvim-time-machine.nvim-configuration|
  - Quick Start              |time-machine.nvim-time-machine.nvim-quick-start|
  - API                              |time-machine.nvim-time-machine.nvim-api|
  - Keybindings              |time-machine.nvim-time-machine.nvim-keybindings|
  - Hlgroups                    |time-machine.nvim-time-machine.nvim-hlgroups|

==============================================================================
1. time-machine.nvim                     *time-machine.nvim-time-machine.nvim*

Undo. Redo. Time travel. Take control of your edit history with an interactive
timeline, diff previews, taggings, live reloading trees and cleanup functions.


  [!warning]
  - The documentation may not cover all the features of the plugin. I will update it as we go.
  - There is no test yet for now, but it will be added soon. Hopefully nothing breaks.
  - The plugin will never be perfect for everyone, but if you have any workflow or feature request, please open an issue, better yet, a PR.

FEATURES                        *time-machine.nvim-time-machine.nvim-features*

- **Interactive History Tree**Navigate your entire undo history in a collapsible tree view, grouping related edits for an intuitive overview.
- **Live Diff Preview**Instantly preview the changes introduced at any point in time with unified or custom diff formats.
- **Tag & Bookmark**Mark important snapshots with custom tags for quick access—never lose your critical checkpoints.
- **Multiple Diff Engines**Out-of-the-box support for native Vim diff, difft, or standard diff—use whichever suits your workflow.
- **Hot Reload**Keep your undo tree up-to-date without manually refreshing, with automatic snapshot reloads happening in the background.
- **Undo File Cleaning**Easily purge individual buffers or all undo files, with optional force flags to prevent accidental data loss.


INSTALLATION                *time-machine.nvim-time-machine.nvim-installation*

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    -- time-machine.lua
    return {
     "y3owk1n/time-machine.nvim",
     version = "*", -- remove this if you want to use the `main` branch
     opts = {
      -- your configuration comes here
      -- or leave it empty to use the default settings
      -- refer to the configuration section below
     }
    }
<

Ifyou are using other package managers you need to call `setup`

>lua
    require("time-machine").setup({
      -- your configuration
    })
<


REQUIREMENTS ~

- Neovim0.11+ with Lua support
- Optional diff utilities in your $PATH:
    - `difft` for syntax-aware diffs
    - Standard `diff` utility
- Recommended Neovim settings:

>lua
    vim.opt.undofile = true                      -- Enable persistent undo
    vim.opt.undodir = vim.fn.expand("~/.undodir") -- Set custom undo directory
<


CONFIGURATION              *time-machine.nvim-time-machine.nvim-configuration*


  [!important] Make sure to run `:checkhealth time-machine` if something isn’t
  working properly.
**time-machine.nvim** is highly configurable. And the default configurations
are as below.


DEFAULT OPTIONS ~

>lua
    ---@alias TimeMachine.DiffTool "native"|TimeMachine.DiffToolExternal
    ---@alias TimeMachine.DiffToolExternal "difft"|"diff"|"delta"
    ---@alias TimeMachine.SplitDirection 'left'|'right'
    
    ---@class TimeMachine.Config
    ---@field diff_tool? TimeMachine.DiffTool The diff tool to use
    ---@field native_diff_opts? vim.diff.Opts The options for vim.diff
    ---@field external_diff_args? table<TimeMachine.DiffToolExternal, string[]> The arguments for external diff tools
    ---@field ignore_filesize? integer|nil The file size to ignore undo saved to disk
    ---@field ignored_filetypes? string[] The file types to ignore undo saved to disk
    ---@field split_opts? TimeMachine.Config.SplitOpts The split options
    ---@field float_opts? TimeMachine.Config.FloatOpts The floating window options
    ---@field keymaps? TimeMachine.Config.Keymaps The keymaps for actions
    
    ---@class TimeMachine.Config.Keymaps
    ---@field undo? string The keymap to undo
    ---@field redo? string The keymap to redo
    ---@field restore_undopoint? string The keymap to restore the undopoint
    ---@field refresh_timeline? string The keymap to refresh the timeline
    ---@field preview_sequence_diff? string The keymap to preview the sequence diff
    ---@field tag_sequence? string The keymap to tag the sequence
    ---@field close? string The keymap to close the timeline
    ---@field help? string The keymap to show the help
    ---@field toggle_current_timeline? string The keymap to toggle to only show the current timeline
    
    ---@class TimeMachine.Config.SplitOpts
    ---@field split? TimeMachine.SplitDirection The split direction
    ---@field width? integer The width of the split
    
    ---@class TimeMachine.Config.FloatOpts
    ---@field width? integer The width of the window
    ---@field height? integer The height of the window
<

>lua
    ---@type TimeMachine.Config
    {
     split_opts = {
      split = "left", -- where to open the tree panel
      width = 50, -- columns number
     },
     float_opts = {
      width = 0.8, -- between 0 and 1
      height = 0.8, -- between 0 and 1
     },
     diff_tool = "native", -- default diff engine
     native_diff_opts = { -- only used when diff_tool is "native"
      result_type = "unified",
      ctxlen = 3,
      algorithm = "histogram",
     },
     external_diff_args = {}, -- set additional arguments for external diff tools
     keymaps = {
      undo = "u",
      redo = "<C-r>",
      restore_undopoint = "<CR>",
      refresh_timeline = "r",
      preview_sequence_diff = "p",
      tag_sequence = "t",
      close = "q",
      help = "g?",
      toggle_current_timeline = "c",
     },
     ignore_filesize = nil, -- e.g. 10 * 1024 * 1024
     ignored_filetypes = {
      "terminal",
      "nofile",
      "time-machine-list",
      "mason",
      "snacks_picker_list",
      "snacks_picker_input",
      "snacks_dashboard",
      "snacks_notif_history",
      "lazy",
     },
    }
<


  [!note] `ignored_filesize` and `ignored_filetypes` does not disable the undo
  functionality, it only prevents the undo to be saved to the undofile. You
  don’t have to set them if you don’t want to.

QUICK START                  *time-machine.nvim-time-machine.nvim-quick-start*

See the example below for how to configure **time-machine.nvim**.

>lua
    {
     "y3owk1n/time-machine.nvim",
     cmd = {
      "TimeMachineToggle",
      "TimeMachinePurgeBuffer",
      "TimeMachinePurgeAll",
     },
     ---@type TimeMachine.Config
     opts = {},
     keys = {
      {
       "<leader>t",
       "",
       desc = "Time Machine",
      },
      {
       "<leader>tt",
       function()
        require("time-machine").actions.toggle()
       end,
       mode = "n",
       desc = "[Time Machine] Toggle Tree",
      },
      {
       "<leader>tx",
       function()
        require("time-machine").actions.purge_current()
       end,
       mode = "n",
       desc = "[Time Machine] Purge current",
      },
      {
       "<leader>tX",
       function()
        require("time-machine").actions.purge_all()
       end,
       mode = "n",
       desc = "[Time Machine] Purge all",
      },
     },
    },
<


API                                  *time-machine.nvim-time-machine.nvim-api*

**time-machine.nvim** provides the following api functions that you can use to
map to your own keybindings:


TOGGLE THE TREE ~

Toggle the undotree based on current buffer.

>lua
    require("time-machine").toggle()
    
    -- or any of the equivalents
    
    :TimeMachineToggle
    :lua require("time-machine").toggle()
<


PURGE UNDOFILE FOR THE CURRENT BUFFER ~

Purge the undofile for the current buffer (including tagfile).

>lua
    ---@param force? boolean Whether to force the purge
    require("time-machine").purge_buffer(force)
    
    -- or any of the equivalents
    
    :TimeMachinePurgeBuffer
    :TimeMachinePurgeBuffer! -- force
    :lua require("time-machine").purge_buffer()
<


PURGE ALL UNDOFILES ~

Purge all undofiles (including tagfiles).

>lua
    ---@param force? boolean Whether to force the purge
    require("time-machine").purge_all(force)
    
    -- or any of the equivalents
    
    :TimeMachinePurgeAll
    :TimeMachinePurgeAll! -- force
    :lua require("time-machine").purge_all()
<


KEYBINDINGS                  *time-machine.nvim-time-machine.nvim-keybindings*

- `<CR>` **Restore** - Restore to the selected sequence
- `r` **Refresh** - Refresh the data
- `p` **Preview** - Show the diff of the selected sequence
- `t` **Tag** - Tag the selected sequence (only work if the buffer is persistent)
- `q` **Close** - Close the window
- `c` **Toggle timeline** - Toggle the timeline to current timeline or all
- `g?` **Help** - Show the help
- `u` **Undo** - Undo the selected sequence in the current timeline
- `<C-r>` **Redo** - Redo the selected sequence in the current timeline


HLGROUPS                        *time-machine.nvim-time-machine.nvim-hlgroups*

- `TimeMachineCurrent` - Current sequence (current line)
- `TimeMachineTimeline` - Current active timeline (for the icon)
- `TimeMachineKeymap` - Keymaps at the header section
- `TimeMachineInfo` - Info at the header section
- `TimeMachineSeq` - Individual sequence number
- `TimeMachineTag` - Tags text

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
